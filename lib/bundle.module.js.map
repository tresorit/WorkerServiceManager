{"version":3,"file":"bundle.module.js","sources":["../src/messageTransformers/defaultMessageTransformer.ts","../src/port/IPortHandler.ts","../src/deferredPromise.ts","../src/port/BasicPortHandler.ts","../src/port/AsyncPortHandler.ts","../src/port/LazyPortHandler.ts","../src/serviceMap.ts","../src/messageTransformers/autoTransferrableMessageTransformer.ts","../src/multiRemoteService.ts","../src/port/WorkerGlobalPortHandler.ts","../src/remoteService.ts","../src/workerServiceManager.ts"],"sourcesContent":["import { IMessageTransformer, Transferable } from \"./IMessageTransformer\";\n\nfunction transformError(err) {\n  return {\n    message: err.message,\n    name: err.name,\n    stack: err.stack,\n  };\n}\n\nexport class DefaultMessageTransformer implements IMessageTransformer {\n  public transformMessage(message: any): [any, Transferable[]] {\n    return [this.transform(message, new Map<any, boolean>())[0], []];\n  }\n\n  private transform(message: any, copies: Map<any, any>): [any, boolean] {\n    if (message && typeof message === \"object\") {\n      if (copies.has(message)) {\n        return [copies.get(message), true];\n      }\n\n      switch (Object.prototype.toString.call(message)) {\n        case \"[object ArrayBuffer]\":\n        case \"[object Uint8Array]\":\n        case \"[object Int8Array]\":\n        case \"[object Uint16Array]\":\n        case \"[object Int16Array]\":\n        case \"[object Uint32Array]\":\n        case \"[object Int32Array]\":\n        case \"[object Float32Array]\":\n        case \"[object Float64Array]\":\n          if (message.buffer.byteLength === message.byteLength) {\n            return [message, false];\n          }\n          const copy = new message.constructor(message);\n          copies.set(message, copy);\n          return [copy, true];\n        case \"[object Blob]\":\n        case \"[object File]\":\n          return [message, false];\n        case \"[object Array]\":\n          const arrRes = message.map((e) => this.transform(e, copies));\n          const copiedArr = arrRes.reduce((a, c) => a || c, false);\n\n          if (copiedArr) {\n            const copyArr = arrRes.map((a) => a[0]);\n            copies.set(message, copyArr);\n            return [copyArr, true];\n          }\n          return [message, false];\n        case \"[object Promise]\":\n        case \"[object XMLHttpRequest]\":\n        case \"[object Event]\":\n          throw new Error(\"CommunicationErrorNonMessageableValue\");\n        case \"[object DOMError]\":\n        case \"[object DOMException]\":\n          const copyDOMError = transformError(message);\n          copies.set(message, copyDOMError);\n          return [copyDOMError, true];\n        default:\n          if (message instanceof Error) {\n            const copyError = transformError(message);\n            copies.set(message, copyError);\n            return [copyError, true];\n          }\n\n          if (message instanceof Date) {\n            return [message, false];\n          }\n\n          const resObj = {};\n          for (const key of Object.keys(message)) {\n            if (!key.startsWith(\"_\")) {\n              const cRes = this.transform(message[key], copies);\n              resObj[key] = cRes[0];\n            }\n          }\n          copies.set(message, resObj);\n          return [resObj, true];\n      }\n    }\n    return [message, false];\n  }\n}\n","export interface IWorkerMessagePort {\r\n  onmessage: (event: MessageEvent) => void | Promise<void>;\r\n  terminate: () => void;\r\n\r\n  postMessage(data: any, transfers?: any[]): void;\r\n}\r\n\r\nexport function isPortHandler(portHandler: any): portHandler is IPortHandler {\r\n  return (portHandler as IPortHandler).terminate !== undefined &&\r\n    (portHandler as IPortHandler).setCallHandler !== undefined &&\r\n    (portHandler as IPortHandler).call !== undefined &&\r\n    (portHandler as IPortHandler).fire !== undefined;\r\n}\r\n\r\nexport interface IPortHandler {\r\n  terminate(): Promise<void>;\r\n\r\n  setCallHandler(handler): void;\r\n\r\n  call(service, method, args): Promise<any>;\r\n\r\n  fire(service, method, args): Promise<void>;\r\n}\r\n","export class DeferredPromise<T> {\n  public promise: Promise<T>;\n  public resolve: (value?: PromiseLike<T> | T) => void;\n  public reject: (reason?: any) => void;\n\n  constructor() {\n    this.promise = new Promise((res, rej) => {\n      this.resolve = res;\n      this.reject = rej;\n    });\n  }\n}\n","import { DeferredPromise } from \"../deferredPromise\";\r\nimport { IMessageTransformer, Transferable } from \"../messageTransformers/IMessageTransformer\";\r\nimport { IPortHandler, IWorkerMessagePort } from \"./IPortHandler\";\r\n\r\nenum PortCommands {\r\n  call,\r\n  fire,\r\n  resolve,\r\n  reject,\r\n}\r\n\r\nexport class BasicPortHandler implements IPortHandler {\r\n  private callHandler: (service, method, args) => Promise<any>;\r\n  private deferreds: Map<number, DeferredPromise<any>>;\r\n  private nextPid: number;\r\n\r\n  constructor(protected port: IWorkerMessagePort | null, protected messageTransformer: IMessageTransformer) {\r\n    this.nextPid = 0;\r\n    this.deferreds = new Map<number, DeferredPromise<any>>();\r\n    this.callHandler = null;\r\n\r\n    if (this.port) {\r\n      this.port.onmessage = this.handleMessage.bind(this);\r\n    }\r\n  }\r\n\r\n  public async terminate(): Promise<void> {\r\n    const port = this.port;\r\n\r\n    port.onmessage = undefined;\r\n    port.terminate();\r\n\r\n    this.port = undefined;\r\n  }\r\n\r\n  public async call(service, method, args): Promise<any> {\r\n    const deferred = new DeferredPromise<any>();\r\n    const pid = this.nextPid++;\r\n    this.deferreds.set(pid, deferred);\r\n    const msg = this.messageTransformer.transformMessage(args);\r\n    try {\r\n      await this.postMessage([PortCommands.call, pid, service, method, msg[0]], msg[1]);\r\n    } catch (ex) {\r\n      deferred.reject(ex);\r\n    }\r\n    return deferred.promise;\r\n  }\r\n\r\n  public setCallHandler(handler): void {\r\n    if (this.callHandler !== null) throw new Error(\"Call handler already set\");\r\n    this.callHandler = handler;\r\n  }\r\n\r\n  public fire(service, method, args): Promise<void> {\r\n    const msg = this.messageTransformer.transformMessage(args);\r\n    return this.postMessage([PortCommands.fire, service, method, msg[0]], msg[1]);\r\n  }\r\n\r\n  protected async postMessage(msg: any, transferables: Transferable[]): Promise<void> {\r\n    if (!this.port) {\r\n      throw new Error(\"PortTerminated\");\r\n    }\r\n\r\n    this.port.postMessage(msg, transferables);\r\n  }\r\n\r\n  protected async handleMessage(ev: any): Promise<void> {\r\n    switch (ev.data[0]) { // cmd\r\n      case PortCommands.fire:\r\n        try {\r\n          // We intentionally ignore the result (and even the errors) of the call. This is rarely a good idea,\r\n          // but it is sometimes useful.\r\n          //noinspection JSIgnoredPromiseFromCall\r\n          this.callHandler(ev.data[2], ev.data[3], ev.data[4]);\r\n        } catch (ex) {\r\n          // We ignore errors during calls because we have no way to handle them.\r\n          // TODO: add an settable error handler/logger\r\n          // console.error(ex);\r\n        }\r\n        break;\r\n      case PortCommands.call:\r\n        try {\r\n          const res = await this.callHandler(\r\n            ev.data[2],\r\n            ev.data[3],\r\n            ev.data[4],\r\n          );\r\n          const msg = this.messageTransformer.transformMessage(res);\r\n          await this.postMessage([PortCommands.resolve, ev.data[1], msg[0]], msg[1]);\r\n        } catch (ex) {\r\n          const msg = this.messageTransformer.transformMessage(ex);\r\n          await this.postMessage([PortCommands.reject, ev.data[1], msg[0]], msg[1]);\r\n        }\r\n        break;\r\n      case PortCommands.resolve:\r\n        this.deferreds.get(ev.data[1]).resolve(ev.data[2]);\r\n        this.deferreds.delete(ev.data[1]);\r\n        break;\r\n      case PortCommands.reject:\r\n        this.deferreds.get(ev.data[1]).reject(ev.data[2]);\r\n        this.deferreds.delete(ev.data[1]);\r\n        break;\r\n    }\r\n  }\r\n}\r\n","import { IMessageTransformer, Transferable } from \"../messageTransformers/IMessageTransformer\";\r\nimport { BasicPortHandler } from \"./BasicPortHandler\";\r\nimport { IWorkerMessagePort } from \"./IPortHandler\";\r\n\r\nexport class AsyncPortHandler extends BasicPortHandler {\r\n  constructor(protected portPromise: Promise<IWorkerMessagePort>, messageTransformer: IMessageTransformer) {\r\n    super(undefined, messageTransformer);\r\n  }\r\n\r\n  public async terminate(): Promise<void> {\r\n    await this.ensurePort();\r\n    this.portPromise = undefined;\r\n    return super.terminate();\r\n  }\r\n\r\n  protected async postMessage(msg: any, transferables: Transferable[]): Promise<void> {\r\n    await this.ensurePort();\r\n    return super.postMessage(msg, transferables);\r\n  }\r\n\r\n  protected async ensurePort(): Promise<void> {\r\n    if (!this.port && this.portPromise) {\r\n      this.port = await this.portPromise;\r\n      this.port.onmessage = this.handleMessage.bind(this);\r\n    }\r\n  }\r\n}\r\n","import { IMessageTransformer, Transferable } from \"../messageTransformers/IMessageTransformer\";\r\nimport { AsyncPortHandler } from \"./AsyncPortHandler\";\r\nimport { IWorkerMessagePort } from \"./IPortHandler\";\r\n\r\nexport class LazyPortHandler extends AsyncPortHandler {\r\n  constructor(private portFactory: () => Promise<IWorkerMessagePort>, messageTransformer: IMessageTransformer) {\r\n    super(undefined, messageTransformer);\r\n  }\r\n\r\n  public async terminate(): Promise<void> {\r\n    await this.ensurePort();\r\n    this.portFactory = undefined;\r\n    return super.terminate();\r\n  }\r\n\r\n  protected async postMessage(msg: any, transferables: Transferable[]): Promise<void> {\r\n    await this.ensurePort();\r\n    return super.postMessage(msg, transferables);\r\n  }\r\n\r\n  protected async ensurePort(): Promise<void> {\r\n    if (!this.portPromise && this.portFactory) {\r\n      this.portPromise = this.portFactory();\r\n    }\r\n\r\n    return super.ensurePort();\r\n  }\r\n}\r\n","import { DefaultMessageTransformer } from \"./messageTransformers/defaultMessageTransformer\";\nimport { IMessageTransformer } from \"./messageTransformers/IMessageTransformer\";\nimport { AsyncPortHandler } from \"./port/AsyncPortHandler\";\nimport { BasicPortHandler } from \"./port/BasicPortHandler\";\nimport { IPortHandler, IWorkerMessagePort } from \"./port/IPortHandler\";\nimport { LazyPortHandler } from \"./port/LazyPortHandler\";\n\nexport class ServiceMap {\n  public services: Map<string, any>;\n  public ports: IPortHandler[];\n\n  constructor(private messageTransformer: IMessageTransformer = new DefaultMessageTransformer()) {\n    this.services = new Map<string, any>();\n    this.ports = [];\n  }\n\n  public addPort(port: IWorkerMessagePort | Promise<IWorkerMessagePort> | (() => Promise<IWorkerMessagePort>)) {\n    let handler;\n    if (typeof port === \"function\") {\n      handler = new LazyPortHandler(port, this.messageTransformer);\n    } else if (port instanceof Promise) {\n      handler = new AsyncPortHandler(port, this.messageTransformer);\n    } else {\n      handler = new BasicPortHandler(port, this.messageTransformer);\n    }\n\n    handler.setCallHandler(this.handleCall.bind(this));\n    this.ports.push(handler);\n    return handler;\n  }\n\n  public terminatePort(handler: IPortHandler): void {\n    this.ports.splice(this.ports.indexOf(handler), 1);\n    // noinspection JSIgnoredPromiseFromCall\n    handler.terminate();\n  }\n\n  public addServiceObject(name, obj: any) {\n    return this.services.set(name, obj);\n  }\n\n  public async handleCall(service: string, method: string, args: any[]) {\n    const serviceObj = this.services.get(service);\n    if (serviceObj !== undefined) return await serviceObj[method](...args);\n\n    // We don't know about this service at all...\n    throw new Error(\"Service not found\");\n  }\n}\n","import { IMessageTransformer, Transferable } from \"./IMessageTransformer\";\n\nfunction transformError(err) {\n  return {\n    message: err.message,\n    name: err.name,\n    stack: err.stack,\n  };\n}\n\nexport class AutoTransferrableMessageTransformer implements IMessageTransformer {\n  public transformMessage(message: any): [any, Transferable[]] {\n    return this.transform(message, new Map<any, boolean>()).slice(0, 2) as [any, Transferable[]];\n  }\n\n  private transform(message: any, copies: Map<any, any>): [any, Transferable[], boolean] {\n    if (message && typeof message === \"object\") {\n      if (copies.has(message)) {\n        return [copies.get(message), [], true];\n      }\n\n      switch (Object.prototype.toString.call(message)) {\n        case \"[object ArrayBuffer]\":\n        case \"[object Uint8Array]\":\n        case \"[object Int8Array]\":\n        case \"[object Uint16Array]\":\n        case \"[object Int16Array]\":\n        case \"[object Uint32Array]\":\n        case \"[object Int32Array]\":\n        case \"[object Float32Array]\":\n        case \"[object Float64Array]\":\n          if (message.buffer.byteLength === message.byteLength) {\n            return [message, [message.buffer], false];\n          }\n          const copy = new message.constructor(message);\n          copies.set(message, copy);\n          return [copy, [copy.buffer], true];\n        case \"[object Blob]\":\n        case \"[object File]\":\n          return [message, [], false];\n        case \"[object Array]\":\n          const arrRes = message.map((e) => this.transform(e, copies));\n          const copiedArr = arrRes.reduce((a, c) => a || c, false);\n          const arrTransferables = arrRes.reduce((a, c) => a.concat(c[1]), []);\n\n          if (copiedArr) {\n            const copyArr = arrRes.map((a) => a[0]);\n            copies.set(message, copyArr);\n            return [copyArr, arrTransferables, true];\n          }\n          return [message, arrTransferables, false];\n        case \"[object Promise]\":\n        case \"[object XMLHttpRequest]\":\n        case \"[object Event]\":\n          throw new Error(\"CommunicationErrorNonMessageableValue\");\n        case \"[object DOMError]\":\n        case \"[object DOMException]\":\n          const copyDOMError = transformError(message);\n          copies.set(message, copyDOMError);\n          return [copyDOMError, [], true];\n        default:\n          if (message instanceof Error) {\n            const copyError = transformError(message);\n            copies.set(message, copyError);\n            return [copyError, [], true];\n          }\n\n          if (message instanceof Date) {\n            return [message, [], false];\n          }\n\n          const resObj = {};\n          let transferrables = [];\n          for (const key of Object.keys(message)) {\n            if (!key.startsWith(\"_\")) {\n              const cRes = this.transform(message[key], copies);\n              transferrables = transferrables.concat(cRes[1]);\n              resObj[key] = cRes[0];\n            }\n          }\n          copies.set(message, resObj);\n          return [resObj, transferrables, true];\n      }\n    }\n    return [message, [], false];\n  }\n}\n","import { DeferredPromise } from \"./deferredPromise\";\nimport { DefaultMessageTransformer } from \"./messageTransformers/defaultMessageTransformer\";\nimport { IMessageTransformer } from \"./messageTransformers/IMessageTransformer\";\nimport { AsyncPortHandler } from \"./port/AsyncPortHandler\";\nimport { IWorkerMessagePort, IPortHandler } from \"./port/IPortHandler\";\nimport { RemoteService } from \"./remoteService\";\nimport { ServiceMap } from \"./serviceMap\";\n\nexport class MultiRemoteService<T extends RemoteService> {\n  private busyPorts: T[];\n  private freePorts: IPortHandler[];\n\n  private queue: Array<DeferredPromise<IPortHandler>>;\n\n  constructor(private serviceMap: ServiceMap,\n    private portFactory: () => Promise<IWorkerMessagePort>, private proxyType: new (ph: IPortHandler) => T,\n    private maxPorts: number, private minPorts: number = 0,\n    private messageTransformer: IMessageTransformer = new DefaultMessageTransformer(),\n  ) {\n    this.busyPorts = [];\n    this.freePorts = [];\n    this.queue = [];\n  }\n\n  public spinUp() {\n    while (this.freePorts.length < this.minPorts) {\n      this.releasePort(this.getNewPort());\n    }\n  }\n\n  public async getRemote(): Promise<T> {\n    let portHandler: IPortHandler;\n    if (this.busyPorts.length >= this.maxPorts) {\n      const prom = new DeferredPromise<IPortHandler>();\n      this.queue.push(prom);\n      portHandler = await prom.promise;\n    } else if (this.freePorts.length > 0) {\n      portHandler = this.freePorts.shift();\n    } else {\n      portHandler = this.getNewPort();\n    }\n\n    const remote = new this.proxyType(portHandler);\n    this.busyPorts.push(remote);\n\n    return remote;\n  }\n\n  public releaseRemote(remote: T): void {\n    const portHandler = remote.detach();\n\n    this.busyPorts.splice(this.busyPorts.indexOf(remote), 1);\n\n    this.releasePort(portHandler);\n  }\n\n  private releasePort(portHandler: IPortHandler): void {\n    if (this.queue.length > 0) {\n      const deferred = this.queue.shift();\n      deferred.resolve(portHandler);\n    } else if (this.freePorts.length < this.minPorts) {\n      this.freePorts.push(portHandler);\n    } else { // noinspection JSIgnoredPromiseFromCall\n      portHandler.terminate();\n    }\n  }\n\n  private getNewPort() {\n    const ph = new AsyncPortHandler(this.portFactory(), this.messageTransformer);\n    ph.setCallHandler(this.serviceMap.handleCall.bind(this.serviceMap));\n    return ph;\n  }\n}\n","import { IMessageTransformer, Transferable } from \"../messageTransformers/IMessageTransformer\";\nimport { BasicPortHandler } from \"./BasicPortHandler\";\n\nexport class WorkerGlobalPortHandler extends BasicPortHandler {\n    constructor(messageTransformer: IMessageTransformer) {\n        super(null, messageTransformer);\n\n        (self as DedicatedWorkerGlobalScope).onmessage = this.handleMessage.bind(this);\n    }\n\n    public terminate(): Promise<void> {\n        throw new Error(\"ParentNotTerminableFromWorker\");\n    }\n\n    protected async postMessage(msg: any, transferables: Transferable[]): Promise<void> {\n        return (self as DedicatedWorkerGlobalScope).postMessage(msg, transferables);\n    }\n}\n","import { IPortHandler } from \"./port/IPortHandler\";\n\nexport class RemoteService<PortType extends IPortHandler = IPortHandler> {\n    public name: string;\n\n    constructor(private port: PortType) { }\n\n    public call(method, args = []) {\n        if (this.port === undefined) {\n            throw new Error(\"RemoteDetached\");\n        }\n\n        return this.port.call(this.name, method, args);\n    }\n\n    public detach(): PortType {\n        const port = this.port;\n        this.port = undefined;\n        return port;\n    }\n}\n","import { DefaultMessageTransformer } from \"./messageTransformers/defaultMessageTransformer\";\nimport { IMessageTransformer } from \"./messageTransformers/IMessageTransformer\";\nimport { isPortHandler } from \"./port/IPortHandler\";\nimport { ServiceMap } from \"./serviceMap\";\n\nexport class WorkerServiceManager extends ServiceMap {\n  constructor(\n    localServiceMap,\n    remoteServiceMap,\n    messageTransformer: IMessageTransformer = new DefaultMessageTransformer(),\n  ) {\n    super(messageTransformer);\n\n    localServiceMap.forEach((obj, name) => this.addServiceObject(name, obj));\n\n    remoteServiceMap.forEach((serviceProxyTypes, port) => {\n      const portHandler = isPortHandler(port) ? port : this.addPort(port);\n\n      serviceProxyTypes.forEach((serviceProxyInfo) => {\n        const proxy = new serviceProxyInfo[1](portHandler);\n        proxy.name = serviceProxyInfo[0];\n        this.addServiceObject(serviceProxyInfo[0], proxy);\n      });\n    });\n  }\n}\n\nexport { AutoTransferrableMessageTransformer } from \"./messageTransformers/autoTransferrableMessageTransformer\";\nexport { DefaultMessageTransformer } from \"./messageTransformers/defaultMessageTransformer\";\nexport { MultiRemoteService } from \"./multiRemoteService\";\nexport { AsyncPortHandler } from \"./port/AsyncPortHandler\";\nexport { BasicPortHandler } from \"./port/BasicPortHandler\";\nexport { IPortHandler, IWorkerMessagePort } from \"./port/IPortHandler\";\nexport { LazyPortHandler } from \"./port/LazyPortHandler\";\nexport { WorkerGlobalPortHandler } from \"./port/WorkerGlobalPortHandler\";\nexport { RemoteService } from \"./remoteService\";\n\n"],"names":["transformError"],"mappings":"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"}